eyvent {
  nodeHash = ${?NODE_HASH}
  port = "6001"
  port = ${?HTTP_SERVER_PORT}
  nonBlockingPoolThreads = -1
  nonBlockingPoolThreads = ${?NON_BLOCKING_POOL_THREADS}
  blockingPoolThreads = -1
  blockingPoolThreads = ${?BLOCKING_POOL_THREADS}
  netty {
    httpClientThreadsMax = -1
    httpClientThreadsMax = ${?NETTY_HTTP_CLIENT_THREADS_MAX}
  }
  request {
    connectionPoolSizeMin = 10
    connectionPoolSizeMin = ${?CONNECTION_POOL_SIZE_MIN}
    connectionPoolSizeMax = 100
    connectionPoolSizeMax = ${?CONNECTION_POOL_SIZE_MAX}
    connectionTTLInSeconds = 600
    connectionTTLInSeconds = ${?CONNECTION_TTL_IN_SECONDS}
    connectionTimeoutInSeconds = 10
    connectionTimeoutInSeconds = ${?CONNECTION_TIMEOUT_IN_SECONDS}
    connectionPoolType = "FIXED"
    connectionPoolType = ${?CONNECTION_POOL_TYPE}
    target {
      allowedHosts = "*"
      allowedHosts = ${?TARGET_ALLOWED_HOSTS}
      allowedPorts = "*"
      allowedPorts = ${?TARGET_ALLOWED_PORTS}
    }
  }
  events {
    structDefSubFolder = "eventStructDefs"
    structDefSubFolder = ${?STRUCT_DEF_SUB_FOLDER}
    eventStorageSubFolder = "events"
    eventStorageSubFolder = ${?EVENT_STORAGE_SUB_FOLDER}
    partitioning = """{"type": "YEAR_MONTH_DAY_HOUR", "separator": "/"}"""
    partitioning = ${?PARTITIONING}
    validGroups = "*"
    validGroups = ${?VALID_GROUPS}
    stores {
      maxFileSizeInMB = 2
      maxFileSizeInMB = ${?MAX_FILE_SIZE_IN_MB}
      maxNumberOfEvents = 5000
      maxNumberOfEvents = ${?MAX_NUMBER_OF_EVENTS}
    }
  }
  sources {
    eventEndpointToStructDefMapping = "store,simpleEvent1.json"
    eventEndpointToStructDefMapping = ${?EVENT_ENDPOINT_STRUCTDEF_PAIRS}
    consumeMode = "HTTP"
    consumeMode = ${?CONSUME_MODE}
    sqs {
        region = "us-central-1"
        region = ${?AWS_SQS_REGION}
        queueUrl = ""
        queueUrl = ${?AWS_SQS_URL}
        groupKey = "group"
        groupKey = ${?AWS_SQS_GROUP_KEY}
        maxNumRequestMessages = 10
        maxNumRequestMessages = ${?MAX_NUM_REQUEST_MESSAGES}
        maxWaitTimeSeconds = 3
        maxWaitTimeSeconds = ${?MAX_WAIT_TIME_SECONDS}
    }
  }
  persistence {
    mode = "LOCAL"
    mode = ${?PERSISTENCE_MODE}
    moduleClass = ${?PERSISTENCE_MODULE_CLASS}
    directoryPathSeparator = "/"
    directoryPathSeparator = ${?DIRECTORY_PATH_SEPARATOR}
    s3 {
      bucket = ${?AWS_S3_BUCKET}
      bucketPath = ${?AWS_S3_PATH}
      region = ${?AWS_S3_REGION}
    }
    gs {
      bucket = ${?GCP_GS_BUCKET}
      bucketPath = ${?GCP_GS_PATH}
      projectID = ${?GCP_GS_PROJECT_ID}
    }
    local {
      writeBasePath = ""
      writeBasePath = ${?LOCAL_STORAGE_WRITE_BASE_PATH}
      readBasePath = ""
      readBasePath = ${?LOCAL_STORAGE_READ_BASE_PATH}
      resources {
        readBasePath = ""
        readBasePath = ${?LOCAL_RESOURCES_READ_BASE_PATH}
      }
    }
  }
}